'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createTimeoutMiddleware = createTimeoutMiddleware;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _TimeoutError = require('./TimeoutError');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('timeout');

function createTimeoutMiddleware(time) {
    (0, _assert2.default)(time, 'expected a time argument');
    (0, _assert2.default)(typeof time === 'number', 'expected a number');
    (0, _assert2.default)(time > 0, 'expected a timeout larger than 0');
    log('creating timeout middleware for ' + time + 'ms');

    return function timeoutMiddleware(req, next) {
        log('starting timer');

        // start waiting
        var timeout = setTimeout(function () {
            log('request timed out');

            // make sure request wasn't sent
            if (req.sent) {
                log('timed out request somehow already sent');
                return;
            }

            // alert downstream
            req.timedOut = true;
            req.emit('timeout', req);

            // fail
            log('failing with timeout error');
            next(new _TimeoutError.TimeoutError()); // TODO is this super dirty?
        }, time);

        // be ready to cancel the timeout
        function clearTimeoutWrapper() {
            if (!req.timedOut) log('request finished on time');
            clearTimeout(timeout);
        }

        req.on('finished', clearTimeoutWrapper);
        req.on('failed', clearTimeoutWrapper);
        req.timedOut = false;
        req.clearTimeout = clearTimeoutWrapper;

        log('timer setup');
        next();
    };
}